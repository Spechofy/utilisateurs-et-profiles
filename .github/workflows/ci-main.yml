name: CI - Gestion des utilisateurs et profiles (Main)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      # Postgres pour Keycloak
      postgres-keycloak:
        image: postgres:15
        env:
          POSTGRES_DB: keycloak
          POSTGRES_USER: keycloak
          POSTGRES_PASSWORD: password
        ports:
          - 5433:5432  # On mappe en local 5433 pour éviter conflit avec postgres spring
        options: >-
          --health-cmd "pg_isready -U keycloak"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Keycloak configuré pour utiliser la bdd postgres-keycloak
      keycloak:
        image: quay.io/keycloak/keycloak:26.1.3
        ports:
          - 8080:8080
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
          # Config connexion DB Keycloak
          KC_DB: postgres
          KC_DB_URL_HOST: postgres-keycloak
          KC_DB_USERNAME: keycloak
          KC_DB_PASSWORD: password
          KC_HOSTNAME: localhost
        entrypoint: ["/opt/keycloak/bin/kc.sh", "import", "--file", "/opt/keycloak/data/import/realm-export.json", "--", "start-dev"]
        volumes:
          - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
        options: >-
          --health-cmd "curl -f http://localhost:8080/ || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Postgres pour Spring Boot (différent)
      postgres-spring:
        image: postgres:16
        env:
          POSTGRES_DB: dbGestionDesUtilisateurs
          POSTGRES_USER: springuser
          POSTGRES_PASSWORD: springpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U springuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Wait for Keycloak and Postgres to be ready
        run: |
          echo "Waiting for Keycloak..."
          until curl -s http://localhost:8080/ > /dev/null; do sleep 5; done
          echo "Waiting for Postgres Spring..."
          until pg_isready -h localhost -p 5432 -U springuser; do sleep 5; done
          echo "Waiting for Postgres Keycloak..."
          until pg_isready -h localhost -p 5433 -U keycloak; do sleep 5; done

      - name: Run Maven lint (Checkstyle)
        run: mvn checkstyle:check

      - name: Run Maven tests
        env:
          # Database configuration
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/dbGestionDesUtilisateurs
          SPRING_DATASOURCE_USERNAME: springuser
          SPRING_DATASOURCE_PASSWORD: springpass
          # Keycloak configuration
          SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_SPECHOFY_ISSUER_URI: http://localhost:8080/realms/spechofy
          SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_ID: gestion-utilisateurs
          SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET: test-secret
        run: mvn test

      - name: SonarQube Scan
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN
